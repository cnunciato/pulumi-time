{
    "name": "time",
    "description": "A Pulumi package to create time resources in Pulumi programs.",
    "keywords": [
        "pulumi",
        "time"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`time` Terraform Provider](https://github.com/hashicorp/terraform-provider-time).",
    "repository": "https://github.com/pulumiverse/pulumi-time",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumiverse/pulumi-time/sdk/go/time"
        },
        "java": {
            "basePackage": "com.pulumiverse"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package to create time resources in Pulumi programs.",
            "packageName": "@pulumiverse/time",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hashicorp/terraform-provider-time)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-time` repo](https://github.com/pulumi/pulumi-time/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`hashicorp/terraform-provider-time` repo](https://github.com/hashicorp/terraform-provider-time/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "pulumiverse_time",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hashicorp/terraform-provider-time)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-time` repo](https://github.com/pulumi/pulumi-time/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`hashicorp/terraform-provider-time` repo](https://github.com/hashicorp/terraform-provider-time/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {},
    "provider": {
        "description": "The provider type for the time package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n"
    },
    "resources": {
        "time:index/timeOffset:TimeOffset": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as time from \"@pulumiverse/time\";\n\nconst example = new time.TimeOffset(\"example\", {offsetDays: 7});\nexport const oneWeekFromNow = example.rfc3339;\n```\n```python\nimport pulumi\nimport pulumiverse_time as time\n\nexample = time.TimeOffset(\"example\", offset_days=7)\npulumi.export(\"oneWeekFromNow\", example.rfc3339)\n```\n```csharp\nusing Pulumi;\nusing Time = Pulumiverse.Time;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Time.TimeOffset(\"example\", new Time.TimeOffsetArgs\n        {\n            OffsetDays = 7,\n        });\n        this.OneWeekFromNow = example.Rfc3339;\n    }\n\n    [Output(\"oneWeekFromNow\")]\n    public Output\u003cstring\u003e OneWeekFromNow { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-time/sdk/go/time\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := time.NewTimeOffset(ctx, \"example\", \u0026time.TimeOffsetArgs{\n\t\t\tOffsetDays: pulumi.Int(7),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"oneWeekFromNow\", example.Rfc3339)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.time.TimeOffset;\nimport com.pulumi.time.TimeOffsetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new TimeOffset(\"example\", TimeOffsetArgs.builder()        \n            .offsetDays(7)\n            .build());\n\n        ctx.export(\"oneWeekFromNow\", example.rfc3339());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: time:TimeOffset\n    properties:\n      offsetDays: 7\noutputs:\n  oneWeekFromNow: ${example.rfc3339}\n```\n{{% /example %}}\n{{% example %}}\n### Triggers Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as time from \"@pulumiverse/time\";\n\nconst amiUpdate = new time.TimeOffset(\"amiUpdate\", {\n    triggers: {\n        ami_id: data.aws_ami.example.id,\n    },\n    offsetDays: 7,\n});\nconst server = new aws.ec2.Instance(\"server\", {\n    ami: amiUpdate.triggers.apply(triggers =\u003e triggers?.amiId),\n    tags: {\n        ExpirationTime: amiUpdate.rfc3339,\n    },\n});\n// ... (other aws_instance arguments) ...\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Time = Pulumiverse.Time;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var amiUpdate = new Time.TimeOffset(\"amiUpdate\", new Time.TimeOffsetArgs\n        {\n            Triggers = \n            {\n                { \"ami_id\", data.Aws_ami.Example.Id },\n            },\n            OffsetDays = 7,\n        });\n        var server = new Aws.Ec2.Instance(\"server\", new Aws.Ec2.InstanceArgs\n        {\n            Ami = amiUpdate.Triggers.Apply(triggers =\u003e triggers?.AmiId),\n            Tags = \n            {\n                { \"ExpirationTime\", amiUpdate.Rfc3339 },\n            },\n        });\n        // ... (other aws_instance arguments) ...\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-time/sdk/go/time\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tamiUpdate, err := time.NewTimeOffset(ctx, \"amiUpdate\", \u0026time.TimeOffsetArgs{\n\t\t\tTriggers: pulumi.StringMap{\n\t\t\t\t\"ami_id\": pulumi.Any(data.Aws_ami.Example.Id),\n\t\t\t},\n\t\t\tOffsetDays: pulumi.Int(7),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ec2.NewInstance(ctx, \"server\", \u0026ec2.InstanceArgs{\n\t\t\tAmi: amiUpdate.Triggers.ApplyT(func(triggers interface{}) (string, error) {\n\t\t\t\treturn triggers.AmiId, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"ExpirationTime\": amiUpdate.Rfc3339,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.time.TimeOffset;\nimport com.pulumi.time.TimeOffsetArgs;\nimport com.pulumi.aws.ec2.Instance;\nimport com.pulumi.aws.ec2.InstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var amiUpdate = new TimeOffset(\"amiUpdate\", TimeOffsetArgs.builder()        \n            .triggers(Map.of(\"ami_id\", data.aws_ami().example().id()))\n            .offsetDays(7)\n            .build());\n\n        var server = new Instance(\"server\", InstanceArgs.builder()        \n            .ami(amiUpdate.triggers().applyValue(triggers -\u003e triggers.amiId()))\n            .tags(Map.of(\"ExpirationTime\", amiUpdate.rfc3339()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  amiUpdate:\n    type: time:TimeOffset\n    properties:\n      triggers:\n        ami_id: ${data.aws_ami.example.id}\n      offsetDays: 7\n  server:\n    type: aws:ec2:Instance\n    properties:\n      # Read the AMI id \"through\" the time_offset resource to ensure that\n      #   # both will change together.\n      ami: ${amiUpdate.triggers.amiId}\n      tags:\n        ExpirationTime: ${amiUpdate.rfc3339}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the base UTC RFC3339 timestamp and offset years, months, days, hours, minutes, and seconds, separated by commas (`,`), e.g. console\n\n```sh\n $ pulumi import time:index/timeOffset:TimeOffset example 2020-02-12T06:36:13Z,0,0,7,0,0,0\n```\n\n The `triggers` argument cannot be imported. ",
            "properties": {
                "baseRfc3339": {
                    "type": "string",
                    "description": "Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.\n"
                },
                "day": {
                    "type": "integer",
                    "description": "Number day of offset timestamp.\n"
                },
                "hour": {
                    "type": "integer",
                    "description": "Number hour of offset timestamp.\n"
                },
                "minute": {
                    "type": "integer",
                    "description": "Number minute of offset timestamp.\n"
                },
                "month": {
                    "type": "integer",
                    "description": "Number month of offset timestamp.\n"
                },
                "offsetDays": {
                    "type": "integer",
                    "description": "Number of days to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                },
                "offsetHours": {
                    "type": "integer",
                    "description": "Number of hours to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                },
                "offsetMinutes": {
                    "type": "integer",
                    "description": "Number of minutes to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                },
                "offsetMonths": {
                    "type": "integer",
                    "description": "Number of months to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                },
                "offsetSeconds": {
                    "type": "integer",
                    "description": "Number of seconds to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                },
                "offsetYears": {
                    "type": "integer",
                    "description": "Number of years to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                },
                "rfc3339": {
                    "type": "string",
                    "description": "UTC RFC3339 format of the offset timestamp, e.g. `2020-02-12T06:36:13Z`.\n"
                },
                "second": {
                    "type": "integer",
                    "description": "Number second of offset timestamp.\n"
                },
                "triggers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.\n"
                },
                "unix": {
                    "type": "integer",
                    "description": "Number of seconds since epoch time, e.g. `1581489373`.\n"
                },
                "year": {
                    "type": "integer",
                    "description": "Number year of offset timestamp.\n"
                }
            },
            "required": [
                "baseRfc3339",
                "day",
                "hour",
                "minute",
                "month",
                "rfc3339",
                "second",
                "unix",
                "year"
            ],
            "inputProperties": {
                "baseRfc3339": {
                    "type": "string",
                    "description": "Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.\n",
                    "willReplaceOnChanges": true
                },
                "offsetDays": {
                    "type": "integer",
                    "description": "Number of days to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                },
                "offsetHours": {
                    "type": "integer",
                    "description": "Number of hours to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                },
                "offsetMinutes": {
                    "type": "integer",
                    "description": "Number of minutes to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                },
                "offsetMonths": {
                    "type": "integer",
                    "description": "Number of months to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                },
                "offsetSeconds": {
                    "type": "integer",
                    "description": "Number of seconds to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                },
                "offsetYears": {
                    "type": "integer",
                    "description": "Number of years to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                },
                "triggers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TimeOffset resources.\n",
                "properties": {
                    "baseRfc3339": {
                        "type": "string",
                        "description": "Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.\n",
                        "willReplaceOnChanges": true
                    },
                    "day": {
                        "type": "integer",
                        "description": "Number day of offset timestamp.\n"
                    },
                    "hour": {
                        "type": "integer",
                        "description": "Number hour of offset timestamp.\n"
                    },
                    "minute": {
                        "type": "integer",
                        "description": "Number minute of offset timestamp.\n"
                    },
                    "month": {
                        "type": "integer",
                        "description": "Number month of offset timestamp.\n"
                    },
                    "offsetDays": {
                        "type": "integer",
                        "description": "Number of days to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                    },
                    "offsetHours": {
                        "type": "integer",
                        "description": "Number of hours to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                    },
                    "offsetMinutes": {
                        "type": "integer",
                        "description": "Number of minutes to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                    },
                    "offsetMonths": {
                        "type": "integer",
                        "description": "Number of months to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                    },
                    "offsetSeconds": {
                        "type": "integer",
                        "description": "Number of seconds to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                    },
                    "offsetYears": {
                        "type": "integer",
                        "description": "Number of years to offset the base timestamp. Conflicts with other `offset_` arguments.\n"
                    },
                    "rfc3339": {
                        "type": "string",
                        "description": "UTC RFC3339 format of the offset timestamp, e.g. `2020-02-12T06:36:13Z`.\n"
                    },
                    "second": {
                        "type": "integer",
                        "description": "Number second of offset timestamp.\n"
                    },
                    "triggers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.\n",
                        "willReplaceOnChanges": true
                    },
                    "unix": {
                        "type": "integer",
                        "description": "Number of seconds since epoch time, e.g. `1581489373`.\n"
                    },
                    "year": {
                        "type": "integer",
                        "description": "Number year of offset timestamp.\n"
                    }
                },
                "type": "object"
            }
        },
        "time:index/timeRotating:TimeRotating": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThis example configuration will rotate (destroy/create) the resource every 30 days.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as time from \"@pulumi/time\";\n\nconst example = new time.TimeRotating(\"example\", {\n    rotationDays: 30,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_time as time\n\nexample = time.TimeRotating(\"example\", rotation_days=30)\n```\n```csharp\nusing Pulumi;\nusing Time = Pulumiverse.Time;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Time.TimeRotating(\"example\", new Time.TimeRotatingArgs\n        {\n            RotationDays = 30,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-time/sdk/go/time\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := time.NewTimeRotating(ctx, \"example\", \u0026time.TimeRotatingArgs{\n\t\t\tRotationDays: pulumi.Int(30),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.time.TimeRotating;\nimport com.pulumi.time.TimeRotatingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new TimeRotating(\"example\", TimeRotatingArgs.builder()        \n            .rotationDays(30)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: time:TimeRotating\n    properties:\n      rotationDays: 30\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the base UTC RFC3339 value and rotation years, months, days, hours, and minutes, separated by commas (`,`), e.g. for 30 days console\n\n```sh\n $ pulumi import time:index/timeRotating:TimeRotating example 2020-02-12T06:36:13Z,0,0,30,0,0\n```\n\n Otherwise, to import with the rotation RFC3339 value, the base UTC RFC3339 value and rotation UTC RFC3339 value, separated by commas (`,`), e.g. console\n\n```sh\n $ pulumi import time:index/timeRotating:TimeRotating example 2020-02-12T06:36:13Z,2020-02-13T06:36:13Z\n```\n\n The `triggers` argument cannot be imported. ",
            "properties": {
                "day": {
                    "type": "integer",
                    "description": "Number day of timestamp.\n"
                },
                "hour": {
                    "type": "integer",
                    "description": "Number hour of timestamp.\n"
                },
                "minute": {
                    "type": "integer",
                    "description": "Number minute of timestamp.\n"
                },
                "month": {
                    "type": "integer",
                    "description": "Number month of timestamp.\n"
                },
                "rfc3339": {
                    "type": "string",
                    "description": "Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.\n"
                },
                "rotationDays": {
                    "type": "integer",
                    "description": "Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                },
                "rotationHours": {
                    "type": "integer",
                    "description": "Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                },
                "rotationMinutes": {
                    "type": "integer",
                    "description": "Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                },
                "rotationMonths": {
                    "type": "integer",
                    "description": "Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                },
                "rotationRfc3339": {
                    "type": "string",
                    "description": "Configure the rotation timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                },
                "rotationYears": {
                    "type": "integer",
                    "description": "Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                },
                "second": {
                    "type": "integer",
                    "description": "Number second of timestamp.\n"
                },
                "triggers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.\n"
                },
                "unix": {
                    "type": "integer",
                    "description": "Number of seconds since epoch time, e.g. `1581489373`.\n"
                },
                "year": {
                    "type": "integer",
                    "description": "Number year of timestamp.\n"
                }
            },
            "required": [
                "day",
                "hour",
                "minute",
                "month",
                "rfc3339",
                "rotationRfc3339",
                "second",
                "unix",
                "year"
            ],
            "inputProperties": {
                "rfc3339": {
                    "type": "string",
                    "description": "Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.\n",
                    "willReplaceOnChanges": true
                },
                "rotationDays": {
                    "type": "integer",
                    "description": "Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                },
                "rotationHours": {
                    "type": "integer",
                    "description": "Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                },
                "rotationMinutes": {
                    "type": "integer",
                    "description": "Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                },
                "rotationMonths": {
                    "type": "integer",
                    "description": "Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                },
                "rotationRfc3339": {
                    "type": "string",
                    "description": "Configure the rotation timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                },
                "rotationYears": {
                    "type": "integer",
                    "description": "Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                },
                "triggers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TimeRotating resources.\n",
                "properties": {
                    "day": {
                        "type": "integer",
                        "description": "Number day of timestamp.\n"
                    },
                    "hour": {
                        "type": "integer",
                        "description": "Number hour of timestamp.\n"
                    },
                    "minute": {
                        "type": "integer",
                        "description": "Number minute of timestamp.\n"
                    },
                    "month": {
                        "type": "integer",
                        "description": "Number month of timestamp.\n"
                    },
                    "rfc3339": {
                        "type": "string",
                        "description": "Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.\n",
                        "willReplaceOnChanges": true
                    },
                    "rotationDays": {
                        "type": "integer",
                        "description": "Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                    },
                    "rotationHours": {
                        "type": "integer",
                        "description": "Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                    },
                    "rotationMinutes": {
                        "type": "integer",
                        "description": "Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                    },
                    "rotationMonths": {
                        "type": "integer",
                        "description": "Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                    },
                    "rotationRfc3339": {
                        "type": "string",
                        "description": "Configure the rotation timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                    },
                    "rotationYears": {
                        "type": "integer",
                        "description": "Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. Conflicts with other `rotation_` arguments.\n"
                    },
                    "second": {
                        "type": "integer",
                        "description": "Number second of timestamp.\n"
                    },
                    "triggers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.\n",
                        "willReplaceOnChanges": true
                    },
                    "unix": {
                        "type": "integer",
                        "description": "Number of seconds since epoch time, e.g. `1581489373`.\n"
                    },
                    "year": {
                        "type": "integer",
                        "description": "Number year of timestamp.\n"
                    }
                },
                "type": "object"
            }
        },
        "time:index/timeSleep:TimeSleep": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### Triggers Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as time from \"@pulumiverse/time\";\n\nconst exampleResourceAssociation = new aws.ram.ResourceAssociation(\"exampleResourceAssociation\", {\n    resourceArn: aws_subnet.example.arn,\n    resourceShareArn: aws_ram_resource_share.example.arn,\n});\n// AWS resources shared via Resource Access Manager can take a few seconds to\n// propagate across AWS accounts after RAM returns a successful association.\nconst ramResourcePropagation = new time.TimeSleep(\"ramResourcePropagation\", {\n    createDuration: \"60s\",\n    triggers: {\n        subnet_arn: exampleResourceAssociation.resourceArn,\n        subnet_id: aws_subnet.example.id,\n    },\n});\nconst exampleSubnetGroup = new aws.rds.SubnetGroup(\"exampleSubnetGroup\", {subnetIds: [ramResourcePropagation.triggers.apply(triggers =\u003e triggers?.subnet_id)]});\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Time = Pulumiverse.Time;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleResourceAssociation = new Aws.Ram.ResourceAssociation(\"exampleResourceAssociation\", new Aws.Ram.ResourceAssociationArgs\n        {\n            ResourceArn = aws_subnet.Example.Arn,\n            ResourceShareArn = aws_ram_resource_share.Example.Arn,\n        });\n        // AWS resources shared via Resource Access Manager can take a few seconds to\n        // propagate across AWS accounts after RAM returns a successful association.\n        var ramResourcePropagation = new Time.TimeSleep(\"ramResourcePropagation\", new Time.TimeSleepArgs\n        {\n            CreateDuration = \"60s\",\n            Triggers = \n            {\n                { \"subnet_arn\", exampleResourceAssociation.ResourceArn },\n                { \"subnet_id\", aws_subnet.Example.Id },\n            },\n        });\n        var exampleSubnetGroup = new Aws.Rds.SubnetGroup(\"exampleSubnetGroup\", new Aws.Rds.SubnetGroupArgs\n        {\n            SubnetIds = \n            {\n                ramResourcePropagation.Triggers.Apply(triggers =\u003e triggers?.Subnet_id),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ram\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/rds\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-time/sdk/go/time\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleResourceAssociation, err := ram.NewResourceAssociation(ctx, \"exampleResourceAssociation\", \u0026ram.ResourceAssociationArgs{\n\t\t\tResourceArn:      pulumi.Any(aws_subnet.Example.Arn),\n\t\t\tResourceShareArn: pulumi.Any(aws_ram_resource_share.Example.Arn),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tramResourcePropagation, err := time.NewTimeSleep(ctx, \"ramResourcePropagation\", \u0026time.TimeSleepArgs{\n\t\t\tCreateDuration: pulumi.String(\"60s\"),\n\t\t\tTriggers: pulumi.StringMap{\n\t\t\t\t\"subnet_arn\": exampleResourceAssociation.ResourceArn,\n\t\t\t\t\"subnet_id\":  pulumi.Any(aws_subnet.Example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rds.NewSubnetGroup(ctx, \"exampleSubnetGroup\", \u0026rds.SubnetGroupArgs{\n\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\tramResourcePropagation.Triggers.ApplyT(func(triggers interface{}) (string, error) {\n\t\t\t\t\treturn triggers.Subnet_id, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ram.ResourceAssociation;\nimport com.pulumi.aws.ram.ResourceAssociationArgs;\nimport com.pulumi.time.TimeSleep;\nimport com.pulumi.time.TimeSleepArgs;\nimport com.pulumi.aws.rds.SubnetGroup;\nimport com.pulumi.aws.rds.SubnetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleResourceAssociation = new ResourceAssociation(\"exampleResourceAssociation\", ResourceAssociationArgs.builder()        \n            .resourceArn(aws_subnet.example().arn())\n            .resourceShareArn(aws_ram_resource_share.example().arn())\n            .build());\n\n        var ramResourcePropagation = new TimeSleep(\"ramResourcePropagation\", TimeSleepArgs.builder()        \n            .createDuration(\"60s\")\n            .triggers(Map.ofEntries(\n                Map.entry(\"subnet_arn\", exampleResourceAssociation.resourceArn()),\n                Map.entry(\"subnet_id\", aws_subnet.example().id())\n            ))\n            .build());\n\n        var exampleSubnetGroup = new SubnetGroup(\"exampleSubnetGroup\", SubnetGroupArgs.builder()        \n            .subnetIds(ramResourcePropagation.triggers().applyValue(triggers -\u003e triggers.subnet_id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleResourceAssociation:\n    type: aws:ram:ResourceAssociation\n    properties:\n      resourceArn: ${aws_subnet.example.arn}\n      resourceShareArn: ${aws_ram_resource_share.example.arn}\n  # AWS resources shared via Resource Access Manager can take a few seconds to\n  # propagate across AWS accounts after RAM returns a successful association.\n  ramResourcePropagation:\n    type: time:TimeSleep\n    properties:\n      createDuration: 60s\n      triggers:\n        subnet_arn: ${exampleResourceAssociation.resourceArn}\n        subnet_id: ${aws_subnet.example.id}\n  exampleSubnetGroup:\n    type: aws:rds:SubnetGroup\n    properties:\n      # Read the Subnet identifier \"through\" the time_sleep resource to ensure a\n      #   # proper dependency and that both will change together.\n      subnetIds:\n        - ${ramResourcePropagation.triggers.subnet_id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported with the `create_duration` and `destroy_duration`, separated by a comma (`,`). e.g. For 30 seconds create duration with no destroy durationconsole\n\n```sh\n $ pulumi import time:index/timeSleep:TimeSleep example 30s,\n```\n\n e.g. For 30 seconds destroy duration with no create durationconsole\n\n```sh\n $ pulumi import time:index/timeSleep:TimeSleep example ,30s\n```\n\n The `triggers` argument cannot be imported. [1]https://golang.org/pkg/time/#ParseDuration ",
            "properties": {
                "createDuration": {
                    "type": "string",
                    "description": "[Time duration](https://golang.org/pkg/time/#ParseDuration) to delay resource creation. For example, `30s` for 30 seconds or `5m` for 5 minutes. Updating this value by itself will not trigger a delay.\n"
                },
                "destroyDuration": {
                    "type": "string"
                },
                "triggers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary map of values that, when changed, will run any creation or destroy delays again. See the main provider documentation for more information.\n"
                }
            },
            "inputProperties": {
                "createDuration": {
                    "type": "string",
                    "description": "[Time duration](https://golang.org/pkg/time/#ParseDuration) to delay resource creation. For example, `30s` for 30 seconds or `5m` for 5 minutes. Updating this value by itself will not trigger a delay.\n"
                },
                "destroyDuration": {
                    "type": "string"
                },
                "triggers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary map of values that, when changed, will run any creation or destroy delays again. See the main provider documentation for more information.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TimeSleep resources.\n",
                "properties": {
                    "createDuration": {
                        "type": "string",
                        "description": "[Time duration](https://golang.org/pkg/time/#ParseDuration) to delay resource creation. For example, `30s` for 30 seconds or `5m` for 5 minutes. Updating this value by itself will not trigger a delay.\n"
                    },
                    "destroyDuration": {
                        "type": "string"
                    },
                    "triggers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Arbitrary map of values that, when changed, will run any creation or destroy delays again. See the main provider documentation for more information.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "time:index/timeStatic:TimeStatic": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as time from \"@pulumiverse/time\";\n\nconst example = new time.TimeStatic(\"example\", {});\nexport const currentTime = example.rfc3339;\n```\n```python\nimport pulumi\nimport pulumiverse_time as time\n\nexample = time.TimeStatic(\"example\")\npulumi.export(\"currentTime\", example.rfc3339)\n```\n```csharp\nusing Pulumi;\nusing Time = Pulumiverse.Time;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Time.TimeStatic(\"example\", new Time.TimeStaticArgs\n        {\n        });\n        this.CurrentTime = example.Rfc3339;\n    }\n\n    [Output(\"currentTime\")]\n    public Output\u003cstring\u003e CurrentTime { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-time/sdk/go/time\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := time.NewTimeStatic(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"currentTime\", example.Rfc3339)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.time.TimeStatic;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new TimeStatic(\"example\");\n\n        ctx.export(\"currentTime\", example.rfc3339());\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: time:TimeStatic\noutputs:\n  currentTime: ${example.rfc3339}\n```\n{{% /example %}}\n{{% example %}}\n### Triggers Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as time from \"@pulumiverse/time\";\n\nconst amiUpdate = new time.TimeStatic(\"amiUpdate\", {triggers: {\n    ami_id: data.aws_ami.example.id,\n}});\nconst server = new aws.ec2.Instance(\"server\", {\n    ami: amiUpdate.triggers.apply(triggers =\u003e triggers?.amiId),\n    tags: {\n        AmiUpdateTime: amiUpdate.rfc3339,\n    },\n});\n// ... (other aws_instance arguments) ...\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Time = Pulumiverse.Time;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var amiUpdate = new Time.TimeStatic(\"amiUpdate\", new Time.TimeStaticArgs\n        {\n            Triggers = \n            {\n                { \"ami_id\", data.Aws_ami.Example.Id },\n            },\n        });\n        var server = new Aws.Ec2.Instance(\"server\", new Aws.Ec2.InstanceArgs\n        {\n            Ami = amiUpdate.Triggers.Apply(triggers =\u003e triggers?.AmiId),\n            Tags = \n            {\n                { \"AmiUpdateTime\", amiUpdate.Rfc3339 },\n            },\n        });\n        // ... (other aws_instance arguments) ...\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-time/sdk/go/time\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tamiUpdate, err := time.NewTimeStatic(ctx, \"amiUpdate\", \u0026time.TimeStaticArgs{\n\t\t\tTriggers: pulumi.StringMap{\n\t\t\t\t\"ami_id\": pulumi.Any(data.Aws_ami.Example.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ec2.NewInstance(ctx, \"server\", \u0026ec2.InstanceArgs{\n\t\t\tAmi: amiUpdate.Triggers.ApplyT(func(triggers interface{}) (string, error) {\n\t\t\t\treturn triggers.AmiId, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"AmiUpdateTime\": amiUpdate.Rfc3339,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.time.TimeStatic;\nimport com.pulumi.time.TimeStaticArgs;\nimport com.pulumi.aws.ec2.Instance;\nimport com.pulumi.aws.ec2.InstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var amiUpdate = new TimeStatic(\"amiUpdate\", TimeStaticArgs.builder()        \n            .triggers(Map.of(\"ami_id\", data.aws_ami().example().id()))\n            .build());\n\n        var server = new Instance(\"server\", InstanceArgs.builder()        \n            .ami(amiUpdate.triggers().applyValue(triggers -\u003e triggers.amiId()))\n            .tags(Map.of(\"AmiUpdateTime\", amiUpdate.rfc3339()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  amiUpdate:\n    type: time:TimeStatic\n    properties:\n      triggers:\n        ami_id: ${data.aws_ami.example.id}\n  server:\n    type: aws:ec2:Instance\n    properties:\n      # Read the AMI id \"through\" the time_static resource to ensure that\n      #   # both will change together.\n      ami: ${amiUpdate.triggers.amiId}\n      tags:\n        AmiUpdateTime: ${amiUpdate.rfc3339}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nThis resource can be imported using the UTC RFC3339 value, e.g. console\n\n```sh\n $ pulumi import time:index/timeStatic:TimeStatic example 2020-02-12T06:36:13Z\n```\n\n The `triggers` argument cannot be imported. ",
            "properties": {
                "day": {
                    "type": "integer",
                    "description": "Number day of timestamp.\n"
                },
                "hour": {
                    "type": "integer",
                    "description": "Number hour of timestamp.\n"
                },
                "minute": {
                    "type": "integer",
                    "description": "Number minute of timestamp.\n"
                },
                "month": {
                    "type": "integer",
                    "description": "Number month of timestamp.\n"
                },
                "rfc3339": {
                    "type": "string",
                    "description": "Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.\n"
                },
                "second": {
                    "type": "integer",
                    "description": "Number second of timestamp.\n"
                },
                "triggers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.\n"
                },
                "unix": {
                    "type": "integer",
                    "description": "Number of seconds since epoch time, e.g. `1581489373`.\n"
                },
                "year": {
                    "type": "integer",
                    "description": "Number year of timestamp.\n"
                }
            },
            "required": [
                "day",
                "hour",
                "minute",
                "month",
                "rfc3339",
                "second",
                "unix",
                "year"
            ],
            "inputProperties": {
                "rfc3339": {
                    "type": "string",
                    "description": "Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.\n",
                    "willReplaceOnChanges": true
                },
                "triggers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TimeStatic resources.\n",
                "properties": {
                    "day": {
                        "type": "integer",
                        "description": "Number day of timestamp.\n"
                    },
                    "hour": {
                        "type": "integer",
                        "description": "Number hour of timestamp.\n"
                    },
                    "minute": {
                        "type": "integer",
                        "description": "Number minute of timestamp.\n"
                    },
                    "month": {
                        "type": "integer",
                        "description": "Number month of timestamp.\n"
                    },
                    "rfc3339": {
                        "type": "string",
                        "description": "Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.\n",
                        "willReplaceOnChanges": true
                    },
                    "second": {
                        "type": "integer",
                        "description": "Number second of timestamp.\n"
                    },
                    "triggers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.\n",
                        "willReplaceOnChanges": true
                    },
                    "unix": {
                        "type": "integer",
                        "description": "Number of seconds since epoch time, e.g. `1581489373`.\n"
                    },
                    "year": {
                        "type": "integer",
                        "description": "Number year of timestamp.\n"
                    }
                },
                "type": "object"
            }
        }
    }
}