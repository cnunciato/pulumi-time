// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package time

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-time/sdk/go/time"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := time.NewTimeOffset(ctx, "example", &time.TimeOffsetArgs{
// 			OffsetDays: pulumi.Int(7),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("oneWeekFromNow", example.Rfc3339)
// 		return nil
// 	})
// }
// ```
// ### Triggers Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-time/sdk/go/time"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		amiUpdate, err := time.NewTimeOffset(ctx, "amiUpdate", &time.TimeOffsetArgs{
// 			Triggers: pulumi.StringMap{
// 				"ami_id": pulumi.Any(data.Aws_ami.Example.Id),
// 			},
// 			OffsetDays: pulumi.Int(7),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ec2.NewInstance(ctx, "server", &ec2.InstanceArgs{
// 			Ami: amiUpdate.Triggers.ApplyT(func(triggers interface{}) (string, error) {
// 				return triggers.AmiId, nil
// 			}).(pulumi.StringOutput),
// 			Tags: pulumi.StringMap{
// 				"ExpirationTime": amiUpdate.Rfc3339,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported using the base UTC RFC3339 timestamp and offset years, months, days, hours, minutes, and seconds, separated by commas (`,`), e.g. console
//
// ```sh
//  $ pulumi import time:index/timeOffset:TimeOffset example 2020-02-12T06:36:13Z,0,0,7,0,0,0
// ```
//
//  The `triggers` argument cannot be imported.
type TimeOffset struct {
	pulumi.CustomResourceState

	// Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	BaseRfc3339 pulumi.StringOutput `pulumi:"baseRfc3339"`
	// Number day of offset timestamp.
	Day pulumi.IntOutput `pulumi:"day"`
	// Number hour of offset timestamp.
	Hour pulumi.IntOutput `pulumi:"hour"`
	// Number minute of offset timestamp.
	Minute pulumi.IntOutput `pulumi:"minute"`
	// Number month of offset timestamp.
	Month pulumi.IntOutput `pulumi:"month"`
	// Number of days to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetDays pulumi.IntPtrOutput `pulumi:"offsetDays"`
	// Number of hours to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetHours pulumi.IntPtrOutput `pulumi:"offsetHours"`
	// Number of minutes to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetMinutes pulumi.IntPtrOutput `pulumi:"offsetMinutes"`
	// Number of months to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetMonths pulumi.IntPtrOutput `pulumi:"offsetMonths"`
	// Number of seconds to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetSeconds pulumi.IntPtrOutput `pulumi:"offsetSeconds"`
	// Number of years to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetYears pulumi.IntPtrOutput `pulumi:"offsetYears"`
	// UTC RFC3339 format of the offset timestamp, e.g. `2020-02-12T06:36:13Z`.
	Rfc3339 pulumi.StringOutput `pulumi:"rfc3339"`
	// Number second of offset timestamp.
	Second pulumi.IntOutput `pulumi:"second"`
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers pulumi.StringMapOutput `pulumi:"triggers"`
	// Number of seconds since epoch time, e.g. `1581489373`.
	Unix pulumi.IntOutput `pulumi:"unix"`
	// Number year of offset timestamp.
	Year pulumi.IntOutput `pulumi:"year"`
}

// NewTimeOffset registers a new resource with the given unique name, arguments, and options.
func NewTimeOffset(ctx *pulumi.Context,
	name string, args *TimeOffsetArgs, opts ...pulumi.ResourceOption) (*TimeOffset, error) {
	if args == nil {
		args = &TimeOffsetArgs{}
	}

	var resource TimeOffset
	err := ctx.RegisterResource("time:index/timeOffset:TimeOffset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTimeOffset gets an existing TimeOffset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTimeOffset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TimeOffsetState, opts ...pulumi.ResourceOption) (*TimeOffset, error) {
	var resource TimeOffset
	err := ctx.ReadResource("time:index/timeOffset:TimeOffset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TimeOffset resources.
type timeOffsetState struct {
	// Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	BaseRfc3339 *string `pulumi:"baseRfc3339"`
	// Number day of offset timestamp.
	Day *int `pulumi:"day"`
	// Number hour of offset timestamp.
	Hour *int `pulumi:"hour"`
	// Number minute of offset timestamp.
	Minute *int `pulumi:"minute"`
	// Number month of offset timestamp.
	Month *int `pulumi:"month"`
	// Number of days to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetDays *int `pulumi:"offsetDays"`
	// Number of hours to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetHours *int `pulumi:"offsetHours"`
	// Number of minutes to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetMinutes *int `pulumi:"offsetMinutes"`
	// Number of months to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetMonths *int `pulumi:"offsetMonths"`
	// Number of seconds to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetSeconds *int `pulumi:"offsetSeconds"`
	// Number of years to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetYears *int `pulumi:"offsetYears"`
	// UTC RFC3339 format of the offset timestamp, e.g. `2020-02-12T06:36:13Z`.
	Rfc3339 *string `pulumi:"rfc3339"`
	// Number second of offset timestamp.
	Second *int `pulumi:"second"`
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers map[string]string `pulumi:"triggers"`
	// Number of seconds since epoch time, e.g. `1581489373`.
	Unix *int `pulumi:"unix"`
	// Number year of offset timestamp.
	Year *int `pulumi:"year"`
}

type TimeOffsetState struct {
	// Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	BaseRfc3339 pulumi.StringPtrInput
	// Number day of offset timestamp.
	Day pulumi.IntPtrInput
	// Number hour of offset timestamp.
	Hour pulumi.IntPtrInput
	// Number minute of offset timestamp.
	Minute pulumi.IntPtrInput
	// Number month of offset timestamp.
	Month pulumi.IntPtrInput
	// Number of days to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetDays pulumi.IntPtrInput
	// Number of hours to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetHours pulumi.IntPtrInput
	// Number of minutes to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetMinutes pulumi.IntPtrInput
	// Number of months to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetMonths pulumi.IntPtrInput
	// Number of seconds to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetSeconds pulumi.IntPtrInput
	// Number of years to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetYears pulumi.IntPtrInput
	// UTC RFC3339 format of the offset timestamp, e.g. `2020-02-12T06:36:13Z`.
	Rfc3339 pulumi.StringPtrInput
	// Number second of offset timestamp.
	Second pulumi.IntPtrInput
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers pulumi.StringMapInput
	// Number of seconds since epoch time, e.g. `1581489373`.
	Unix pulumi.IntPtrInput
	// Number year of offset timestamp.
	Year pulumi.IntPtrInput
}

func (TimeOffsetState) ElementType() reflect.Type {
	return reflect.TypeOf((*timeOffsetState)(nil)).Elem()
}

type timeOffsetArgs struct {
	// Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	BaseRfc3339 *string `pulumi:"baseRfc3339"`
	// Number of days to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetDays *int `pulumi:"offsetDays"`
	// Number of hours to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetHours *int `pulumi:"offsetHours"`
	// Number of minutes to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetMinutes *int `pulumi:"offsetMinutes"`
	// Number of months to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetMonths *int `pulumi:"offsetMonths"`
	// Number of seconds to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetSeconds *int `pulumi:"offsetSeconds"`
	// Number of years to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetYears *int `pulumi:"offsetYears"`
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a TimeOffset resource.
type TimeOffsetArgs struct {
	// Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	BaseRfc3339 pulumi.StringPtrInput
	// Number of days to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetDays pulumi.IntPtrInput
	// Number of hours to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetHours pulumi.IntPtrInput
	// Number of minutes to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetMinutes pulumi.IntPtrInput
	// Number of months to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetMonths pulumi.IntPtrInput
	// Number of seconds to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetSeconds pulumi.IntPtrInput
	// Number of years to offset the base timestamp. Conflicts with other `offset_` arguments.
	OffsetYears pulumi.IntPtrInput
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers pulumi.StringMapInput
}

func (TimeOffsetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*timeOffsetArgs)(nil)).Elem()
}

type TimeOffsetInput interface {
	pulumi.Input

	ToTimeOffsetOutput() TimeOffsetOutput
	ToTimeOffsetOutputWithContext(ctx context.Context) TimeOffsetOutput
}

func (*TimeOffset) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeOffset)(nil)).Elem()
}

func (i *TimeOffset) ToTimeOffsetOutput() TimeOffsetOutput {
	return i.ToTimeOffsetOutputWithContext(context.Background())
}

func (i *TimeOffset) ToTimeOffsetOutputWithContext(ctx context.Context) TimeOffsetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOffsetOutput)
}

// TimeOffsetArrayInput is an input type that accepts TimeOffsetArray and TimeOffsetArrayOutput values.
// You can construct a concrete instance of `TimeOffsetArrayInput` via:
//
//          TimeOffsetArray{ TimeOffsetArgs{...} }
type TimeOffsetArrayInput interface {
	pulumi.Input

	ToTimeOffsetArrayOutput() TimeOffsetArrayOutput
	ToTimeOffsetArrayOutputWithContext(context.Context) TimeOffsetArrayOutput
}

type TimeOffsetArray []TimeOffsetInput

func (TimeOffsetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TimeOffset)(nil)).Elem()
}

func (i TimeOffsetArray) ToTimeOffsetArrayOutput() TimeOffsetArrayOutput {
	return i.ToTimeOffsetArrayOutputWithContext(context.Background())
}

func (i TimeOffsetArray) ToTimeOffsetArrayOutputWithContext(ctx context.Context) TimeOffsetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOffsetArrayOutput)
}

// TimeOffsetMapInput is an input type that accepts TimeOffsetMap and TimeOffsetMapOutput values.
// You can construct a concrete instance of `TimeOffsetMapInput` via:
//
//          TimeOffsetMap{ "key": TimeOffsetArgs{...} }
type TimeOffsetMapInput interface {
	pulumi.Input

	ToTimeOffsetMapOutput() TimeOffsetMapOutput
	ToTimeOffsetMapOutputWithContext(context.Context) TimeOffsetMapOutput
}

type TimeOffsetMap map[string]TimeOffsetInput

func (TimeOffsetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TimeOffset)(nil)).Elem()
}

func (i TimeOffsetMap) ToTimeOffsetMapOutput() TimeOffsetMapOutput {
	return i.ToTimeOffsetMapOutputWithContext(context.Background())
}

func (i TimeOffsetMap) ToTimeOffsetMapOutputWithContext(ctx context.Context) TimeOffsetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOffsetMapOutput)
}

type TimeOffsetOutput struct{ *pulumi.OutputState }

func (TimeOffsetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeOffset)(nil)).Elem()
}

func (o TimeOffsetOutput) ToTimeOffsetOutput() TimeOffsetOutput {
	return o
}

func (o TimeOffsetOutput) ToTimeOffsetOutputWithContext(ctx context.Context) TimeOffsetOutput {
	return o
}

// Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
func (o TimeOffsetOutput) BaseRfc3339() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.StringOutput { return v.BaseRfc3339 }).(pulumi.StringOutput)
}

// Number day of offset timestamp.
func (o TimeOffsetOutput) Day() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntOutput { return v.Day }).(pulumi.IntOutput)
}

// Number hour of offset timestamp.
func (o TimeOffsetOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntOutput { return v.Hour }).(pulumi.IntOutput)
}

// Number minute of offset timestamp.
func (o TimeOffsetOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntOutput { return v.Minute }).(pulumi.IntOutput)
}

// Number month of offset timestamp.
func (o TimeOffsetOutput) Month() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntOutput { return v.Month }).(pulumi.IntOutput)
}

// Number of days to offset the base timestamp. Conflicts with other `offset_` arguments.
func (o TimeOffsetOutput) OffsetDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntPtrOutput { return v.OffsetDays }).(pulumi.IntPtrOutput)
}

// Number of hours to offset the base timestamp. Conflicts with other `offset_` arguments.
func (o TimeOffsetOutput) OffsetHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntPtrOutput { return v.OffsetHours }).(pulumi.IntPtrOutput)
}

// Number of minutes to offset the base timestamp. Conflicts with other `offset_` arguments.
func (o TimeOffsetOutput) OffsetMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntPtrOutput { return v.OffsetMinutes }).(pulumi.IntPtrOutput)
}

// Number of months to offset the base timestamp. Conflicts with other `offset_` arguments.
func (o TimeOffsetOutput) OffsetMonths() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntPtrOutput { return v.OffsetMonths }).(pulumi.IntPtrOutput)
}

// Number of seconds to offset the base timestamp. Conflicts with other `offset_` arguments.
func (o TimeOffsetOutput) OffsetSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntPtrOutput { return v.OffsetSeconds }).(pulumi.IntPtrOutput)
}

// Number of years to offset the base timestamp. Conflicts with other `offset_` arguments.
func (o TimeOffsetOutput) OffsetYears() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntPtrOutput { return v.OffsetYears }).(pulumi.IntPtrOutput)
}

// UTC RFC3339 format of the offset timestamp, e.g. `2020-02-12T06:36:13Z`.
func (o TimeOffsetOutput) Rfc3339() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.StringOutput { return v.Rfc3339 }).(pulumi.StringOutput)
}

// Number second of offset timestamp.
func (o TimeOffsetOutput) Second() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntOutput { return v.Second }).(pulumi.IntOutput)
}

// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
func (o TimeOffsetOutput) Triggers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.StringMapOutput { return v.Triggers }).(pulumi.StringMapOutput)
}

// Number of seconds since epoch time, e.g. `1581489373`.
func (o TimeOffsetOutput) Unix() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntOutput { return v.Unix }).(pulumi.IntOutput)
}

// Number year of offset timestamp.
func (o TimeOffsetOutput) Year() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeOffset) pulumi.IntOutput { return v.Year }).(pulumi.IntOutput)
}

type TimeOffsetArrayOutput struct{ *pulumi.OutputState }

func (TimeOffsetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TimeOffset)(nil)).Elem()
}

func (o TimeOffsetArrayOutput) ToTimeOffsetArrayOutput() TimeOffsetArrayOutput {
	return o
}

func (o TimeOffsetArrayOutput) ToTimeOffsetArrayOutputWithContext(ctx context.Context) TimeOffsetArrayOutput {
	return o
}

func (o TimeOffsetArrayOutput) Index(i pulumi.IntInput) TimeOffsetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TimeOffset {
		return vs[0].([]*TimeOffset)[vs[1].(int)]
	}).(TimeOffsetOutput)
}

type TimeOffsetMapOutput struct{ *pulumi.OutputState }

func (TimeOffsetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TimeOffset)(nil)).Elem()
}

func (o TimeOffsetMapOutput) ToTimeOffsetMapOutput() TimeOffsetMapOutput {
	return o
}

func (o TimeOffsetMapOutput) ToTimeOffsetMapOutputWithContext(ctx context.Context) TimeOffsetMapOutput {
	return o
}

func (o TimeOffsetMapOutput) MapIndex(k pulumi.StringInput) TimeOffsetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TimeOffset {
		return vs[0].(map[string]*TimeOffset)[vs[1].(string)]
	}).(TimeOffsetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TimeOffsetInput)(nil)).Elem(), &TimeOffset{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeOffsetArrayInput)(nil)).Elem(), TimeOffsetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeOffsetMapInput)(nil)).Elem(), TimeOffsetMap{})
	pulumi.RegisterOutputType(TimeOffsetOutput{})
	pulumi.RegisterOutputType(TimeOffsetArrayOutput{})
	pulumi.RegisterOutputType(TimeOffsetMapOutput{})
}
