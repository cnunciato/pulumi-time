// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package time

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Triggers Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ram"
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/rds"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-time/sdk/go/time"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceAssociation, err := ram.NewResourceAssociation(ctx, "exampleResourceAssociation", &ram.ResourceAssociationArgs{
// 			ResourceArn:      pulumi.Any(aws_subnet.Example.Arn),
// 			ResourceShareArn: pulumi.Any(aws_ram_resource_share.Example.Arn),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ramResourcePropagation, err := time.NewTimeSleep(ctx, "ramResourcePropagation", &time.TimeSleepArgs{
// 			CreateDuration: pulumi.String("60s"),
// 			Triggers: pulumi.StringMap{
// 				"subnet_arn": exampleResourceAssociation.ResourceArn,
// 				"subnet_id":  pulumi.Any(aws_subnet.Example.Id),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rds.NewSubnetGroup(ctx, "exampleSubnetGroup", &rds.SubnetGroupArgs{
// 			SubnetIds: pulumi.StringArray{
// 				ramResourcePropagation.Triggers.ApplyT(func(triggers interface{}) (string, error) {
// 					return triggers.Subnet_id, nil
// 				}).(pulumi.StringOutput),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported with the `create_duration` and `destroy_duration`, separated by a comma (`,`). e.g. For 30 seconds create duration with no destroy durationconsole
//
// ```sh
//  $ pulumi import time:index/timeSleep:TimeSleep example 30s,
// ```
//
//  e.g. For 30 seconds destroy duration with no create durationconsole
//
// ```sh
//  $ pulumi import time:index/timeSleep:TimeSleep example ,30s
// ```
//
//  The `triggers` argument cannot be imported. [1]https://golang.org/pkg/time/#ParseDuration
type TimeSleep struct {
	pulumi.CustomResourceState

	// [Time duration](https://golang.org/pkg/time/#ParseDuration) to delay resource creation. For example, `30s` for 30 seconds or `5m` for 5 minutes. Updating this value by itself will not trigger a delay.
	CreateDuration  pulumi.StringPtrOutput `pulumi:"createDuration"`
	DestroyDuration pulumi.StringPtrOutput `pulumi:"destroyDuration"`
	// Arbitrary map of values that, when changed, will run any creation or destroy delays again. See the main provider documentation for more information.
	Triggers pulumi.StringMapOutput `pulumi:"triggers"`
}

// NewTimeSleep registers a new resource with the given unique name, arguments, and options.
func NewTimeSleep(ctx *pulumi.Context,
	name string, args *TimeSleepArgs, opts ...pulumi.ResourceOption) (*TimeSleep, error) {
	if args == nil {
		args = &TimeSleepArgs{}
	}

	var resource TimeSleep
	err := ctx.RegisterResource("time:index/timeSleep:TimeSleep", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTimeSleep gets an existing TimeSleep resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTimeSleep(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TimeSleepState, opts ...pulumi.ResourceOption) (*TimeSleep, error) {
	var resource TimeSleep
	err := ctx.ReadResource("time:index/timeSleep:TimeSleep", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TimeSleep resources.
type timeSleepState struct {
	// [Time duration](https://golang.org/pkg/time/#ParseDuration) to delay resource creation. For example, `30s` for 30 seconds or `5m` for 5 minutes. Updating this value by itself will not trigger a delay.
	CreateDuration  *string `pulumi:"createDuration"`
	DestroyDuration *string `pulumi:"destroyDuration"`
	// Arbitrary map of values that, when changed, will run any creation or destroy delays again. See the main provider documentation for more information.
	Triggers map[string]string `pulumi:"triggers"`
}

type TimeSleepState struct {
	// [Time duration](https://golang.org/pkg/time/#ParseDuration) to delay resource creation. For example, `30s` for 30 seconds or `5m` for 5 minutes. Updating this value by itself will not trigger a delay.
	CreateDuration  pulumi.StringPtrInput
	DestroyDuration pulumi.StringPtrInput
	// Arbitrary map of values that, when changed, will run any creation or destroy delays again. See the main provider documentation for more information.
	Triggers pulumi.StringMapInput
}

func (TimeSleepState) ElementType() reflect.Type {
	return reflect.TypeOf((*timeSleepState)(nil)).Elem()
}

type timeSleepArgs struct {
	// [Time duration](https://golang.org/pkg/time/#ParseDuration) to delay resource creation. For example, `30s` for 30 seconds or `5m` for 5 minutes. Updating this value by itself will not trigger a delay.
	CreateDuration  *string `pulumi:"createDuration"`
	DestroyDuration *string `pulumi:"destroyDuration"`
	// Arbitrary map of values that, when changed, will run any creation or destroy delays again. See the main provider documentation for more information.
	Triggers map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a TimeSleep resource.
type TimeSleepArgs struct {
	// [Time duration](https://golang.org/pkg/time/#ParseDuration) to delay resource creation. For example, `30s` for 30 seconds or `5m` for 5 minutes. Updating this value by itself will not trigger a delay.
	CreateDuration  pulumi.StringPtrInput
	DestroyDuration pulumi.StringPtrInput
	// Arbitrary map of values that, when changed, will run any creation or destroy delays again. See the main provider documentation for more information.
	Triggers pulumi.StringMapInput
}

func (TimeSleepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*timeSleepArgs)(nil)).Elem()
}

type TimeSleepInput interface {
	pulumi.Input

	ToTimeSleepOutput() TimeSleepOutput
	ToTimeSleepOutputWithContext(ctx context.Context) TimeSleepOutput
}

func (*TimeSleep) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeSleep)(nil)).Elem()
}

func (i *TimeSleep) ToTimeSleepOutput() TimeSleepOutput {
	return i.ToTimeSleepOutputWithContext(context.Background())
}

func (i *TimeSleep) ToTimeSleepOutputWithContext(ctx context.Context) TimeSleepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeSleepOutput)
}

// TimeSleepArrayInput is an input type that accepts TimeSleepArray and TimeSleepArrayOutput values.
// You can construct a concrete instance of `TimeSleepArrayInput` via:
//
//          TimeSleepArray{ TimeSleepArgs{...} }
type TimeSleepArrayInput interface {
	pulumi.Input

	ToTimeSleepArrayOutput() TimeSleepArrayOutput
	ToTimeSleepArrayOutputWithContext(context.Context) TimeSleepArrayOutput
}

type TimeSleepArray []TimeSleepInput

func (TimeSleepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TimeSleep)(nil)).Elem()
}

func (i TimeSleepArray) ToTimeSleepArrayOutput() TimeSleepArrayOutput {
	return i.ToTimeSleepArrayOutputWithContext(context.Background())
}

func (i TimeSleepArray) ToTimeSleepArrayOutputWithContext(ctx context.Context) TimeSleepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeSleepArrayOutput)
}

// TimeSleepMapInput is an input type that accepts TimeSleepMap and TimeSleepMapOutput values.
// You can construct a concrete instance of `TimeSleepMapInput` via:
//
//          TimeSleepMap{ "key": TimeSleepArgs{...} }
type TimeSleepMapInput interface {
	pulumi.Input

	ToTimeSleepMapOutput() TimeSleepMapOutput
	ToTimeSleepMapOutputWithContext(context.Context) TimeSleepMapOutput
}

type TimeSleepMap map[string]TimeSleepInput

func (TimeSleepMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TimeSleep)(nil)).Elem()
}

func (i TimeSleepMap) ToTimeSleepMapOutput() TimeSleepMapOutput {
	return i.ToTimeSleepMapOutputWithContext(context.Background())
}

func (i TimeSleepMap) ToTimeSleepMapOutputWithContext(ctx context.Context) TimeSleepMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeSleepMapOutput)
}

type TimeSleepOutput struct{ *pulumi.OutputState }

func (TimeSleepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeSleep)(nil)).Elem()
}

func (o TimeSleepOutput) ToTimeSleepOutput() TimeSleepOutput {
	return o
}

func (o TimeSleepOutput) ToTimeSleepOutputWithContext(ctx context.Context) TimeSleepOutput {
	return o
}

// [Time duration](https://golang.org/pkg/time/#ParseDuration) to delay resource creation. For example, `30s` for 30 seconds or `5m` for 5 minutes. Updating this value by itself will not trigger a delay.
func (o TimeSleepOutput) CreateDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeSleep) pulumi.StringPtrOutput { return v.CreateDuration }).(pulumi.StringPtrOutput)
}

func (o TimeSleepOutput) DestroyDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeSleep) pulumi.StringPtrOutput { return v.DestroyDuration }).(pulumi.StringPtrOutput)
}

// Arbitrary map of values that, when changed, will run any creation or destroy delays again. See the main provider documentation for more information.
func (o TimeSleepOutput) Triggers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TimeSleep) pulumi.StringMapOutput { return v.Triggers }).(pulumi.StringMapOutput)
}

type TimeSleepArrayOutput struct{ *pulumi.OutputState }

func (TimeSleepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TimeSleep)(nil)).Elem()
}

func (o TimeSleepArrayOutput) ToTimeSleepArrayOutput() TimeSleepArrayOutput {
	return o
}

func (o TimeSleepArrayOutput) ToTimeSleepArrayOutputWithContext(ctx context.Context) TimeSleepArrayOutput {
	return o
}

func (o TimeSleepArrayOutput) Index(i pulumi.IntInput) TimeSleepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TimeSleep {
		return vs[0].([]*TimeSleep)[vs[1].(int)]
	}).(TimeSleepOutput)
}

type TimeSleepMapOutput struct{ *pulumi.OutputState }

func (TimeSleepMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TimeSleep)(nil)).Elem()
}

func (o TimeSleepMapOutput) ToTimeSleepMapOutput() TimeSleepMapOutput {
	return o
}

func (o TimeSleepMapOutput) ToTimeSleepMapOutputWithContext(ctx context.Context) TimeSleepMapOutput {
	return o
}

func (o TimeSleepMapOutput) MapIndex(k pulumi.StringInput) TimeSleepOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TimeSleep {
		return vs[0].(map[string]*TimeSleep)[vs[1].(string)]
	}).(TimeSleepOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TimeSleepInput)(nil)).Elem(), &TimeSleep{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeSleepArrayInput)(nil)).Elem(), TimeSleepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeSleepMapInput)(nil)).Elem(), TimeSleepMap{})
	pulumi.RegisterOutputType(TimeSleepOutput{})
	pulumi.RegisterOutputType(TimeSleepArrayOutput{})
	pulumi.RegisterOutputType(TimeSleepMapOutput{})
}
