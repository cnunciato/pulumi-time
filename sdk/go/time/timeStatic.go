// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package time

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-time/sdk/go/time"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := time.NewTimeStatic(ctx, "example", nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("currentTime", example.Rfc3339)
// 		return nil
// 	})
// }
// ```
// ### Triggers Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-time/sdk/go/time"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		amiUpdate, err := time.NewTimeStatic(ctx, "amiUpdate", &time.TimeStaticArgs{
// 			Triggers: pulumi.StringMap{
// 				"ami_id": pulumi.Any(data.Aws_ami.Example.Id),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ec2.NewInstance(ctx, "server", &ec2.InstanceArgs{
// 			Ami: amiUpdate.Triggers.ApplyT(func(triggers interface{}) (string, error) {
// 				return triggers.AmiId, nil
// 			}).(pulumi.StringOutput),
// 			Tags: pulumi.StringMap{
// 				"AmiUpdateTime": amiUpdate.Rfc3339,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported using the UTC RFC3339 value, e.g. console
//
// ```sh
//  $ pulumi import time:index/timeStatic:TimeStatic example 2020-02-12T06:36:13Z
// ```
//
//  The `triggers` argument cannot be imported.
type TimeStatic struct {
	pulumi.CustomResourceState

	// Number day of timestamp.
	Day pulumi.IntOutput `pulumi:"day"`
	// Number hour of timestamp.
	Hour pulumi.IntOutput `pulumi:"hour"`
	// Number minute of timestamp.
	Minute pulumi.IntOutput `pulumi:"minute"`
	// Number month of timestamp.
	Month pulumi.IntOutput `pulumi:"month"`
	// Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	Rfc3339 pulumi.StringOutput `pulumi:"rfc3339"`
	// Number second of timestamp.
	Second pulumi.IntOutput `pulumi:"second"`
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers pulumi.StringMapOutput `pulumi:"triggers"`
	// Number of seconds since epoch time, e.g. `1581489373`.
	Unix pulumi.IntOutput `pulumi:"unix"`
	// Number year of timestamp.
	Year pulumi.IntOutput `pulumi:"year"`
}

// NewTimeStatic registers a new resource with the given unique name, arguments, and options.
func NewTimeStatic(ctx *pulumi.Context,
	name string, args *TimeStaticArgs, opts ...pulumi.ResourceOption) (*TimeStatic, error) {
	if args == nil {
		args = &TimeStaticArgs{}
	}

	var resource TimeStatic
	err := ctx.RegisterResource("time:index/timeStatic:TimeStatic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTimeStatic gets an existing TimeStatic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTimeStatic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TimeStaticState, opts ...pulumi.ResourceOption) (*TimeStatic, error) {
	var resource TimeStatic
	err := ctx.ReadResource("time:index/timeStatic:TimeStatic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TimeStatic resources.
type timeStaticState struct {
	// Number day of timestamp.
	Day *int `pulumi:"day"`
	// Number hour of timestamp.
	Hour *int `pulumi:"hour"`
	// Number minute of timestamp.
	Minute *int `pulumi:"minute"`
	// Number month of timestamp.
	Month *int `pulumi:"month"`
	// Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	Rfc3339 *string `pulumi:"rfc3339"`
	// Number second of timestamp.
	Second *int `pulumi:"second"`
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers map[string]string `pulumi:"triggers"`
	// Number of seconds since epoch time, e.g. `1581489373`.
	Unix *int `pulumi:"unix"`
	// Number year of timestamp.
	Year *int `pulumi:"year"`
}

type TimeStaticState struct {
	// Number day of timestamp.
	Day pulumi.IntPtrInput
	// Number hour of timestamp.
	Hour pulumi.IntPtrInput
	// Number minute of timestamp.
	Minute pulumi.IntPtrInput
	// Number month of timestamp.
	Month pulumi.IntPtrInput
	// Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	Rfc3339 pulumi.StringPtrInput
	// Number second of timestamp.
	Second pulumi.IntPtrInput
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers pulumi.StringMapInput
	// Number of seconds since epoch time, e.g. `1581489373`.
	Unix pulumi.IntPtrInput
	// Number year of timestamp.
	Year pulumi.IntPtrInput
}

func (TimeStaticState) ElementType() reflect.Type {
	return reflect.TypeOf((*timeStaticState)(nil)).Elem()
}

type timeStaticArgs struct {
	// Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	Rfc3339 *string `pulumi:"rfc3339"`
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a TimeStatic resource.
type TimeStaticArgs struct {
	// Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	Rfc3339 pulumi.StringPtrInput
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers pulumi.StringMapInput
}

func (TimeStaticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*timeStaticArgs)(nil)).Elem()
}

type TimeStaticInput interface {
	pulumi.Input

	ToTimeStaticOutput() TimeStaticOutput
	ToTimeStaticOutputWithContext(ctx context.Context) TimeStaticOutput
}

func (*TimeStatic) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeStatic)(nil)).Elem()
}

func (i *TimeStatic) ToTimeStaticOutput() TimeStaticOutput {
	return i.ToTimeStaticOutputWithContext(context.Background())
}

func (i *TimeStatic) ToTimeStaticOutputWithContext(ctx context.Context) TimeStaticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeStaticOutput)
}

// TimeStaticArrayInput is an input type that accepts TimeStaticArray and TimeStaticArrayOutput values.
// You can construct a concrete instance of `TimeStaticArrayInput` via:
//
//          TimeStaticArray{ TimeStaticArgs{...} }
type TimeStaticArrayInput interface {
	pulumi.Input

	ToTimeStaticArrayOutput() TimeStaticArrayOutput
	ToTimeStaticArrayOutputWithContext(context.Context) TimeStaticArrayOutput
}

type TimeStaticArray []TimeStaticInput

func (TimeStaticArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TimeStatic)(nil)).Elem()
}

func (i TimeStaticArray) ToTimeStaticArrayOutput() TimeStaticArrayOutput {
	return i.ToTimeStaticArrayOutputWithContext(context.Background())
}

func (i TimeStaticArray) ToTimeStaticArrayOutputWithContext(ctx context.Context) TimeStaticArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeStaticArrayOutput)
}

// TimeStaticMapInput is an input type that accepts TimeStaticMap and TimeStaticMapOutput values.
// You can construct a concrete instance of `TimeStaticMapInput` via:
//
//          TimeStaticMap{ "key": TimeStaticArgs{...} }
type TimeStaticMapInput interface {
	pulumi.Input

	ToTimeStaticMapOutput() TimeStaticMapOutput
	ToTimeStaticMapOutputWithContext(context.Context) TimeStaticMapOutput
}

type TimeStaticMap map[string]TimeStaticInput

func (TimeStaticMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TimeStatic)(nil)).Elem()
}

func (i TimeStaticMap) ToTimeStaticMapOutput() TimeStaticMapOutput {
	return i.ToTimeStaticMapOutputWithContext(context.Background())
}

func (i TimeStaticMap) ToTimeStaticMapOutputWithContext(ctx context.Context) TimeStaticMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeStaticMapOutput)
}

type TimeStaticOutput struct{ *pulumi.OutputState }

func (TimeStaticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeStatic)(nil)).Elem()
}

func (o TimeStaticOutput) ToTimeStaticOutput() TimeStaticOutput {
	return o
}

func (o TimeStaticOutput) ToTimeStaticOutputWithContext(ctx context.Context) TimeStaticOutput {
	return o
}

// Number day of timestamp.
func (o TimeStaticOutput) Day() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeStatic) pulumi.IntOutput { return v.Day }).(pulumi.IntOutput)
}

// Number hour of timestamp.
func (o TimeStaticOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeStatic) pulumi.IntOutput { return v.Hour }).(pulumi.IntOutput)
}

// Number minute of timestamp.
func (o TimeStaticOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeStatic) pulumi.IntOutput { return v.Minute }).(pulumi.IntOutput)
}

// Number month of timestamp.
func (o TimeStaticOutput) Month() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeStatic) pulumi.IntOutput { return v.Month }).(pulumi.IntOutput)
}

// Configure the base timestamp with an UTC [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
func (o TimeStaticOutput) Rfc3339() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeStatic) pulumi.StringOutput { return v.Rfc3339 }).(pulumi.StringOutput)
}

// Number second of timestamp.
func (o TimeStaticOutput) Second() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeStatic) pulumi.IntOutput { return v.Second }).(pulumi.IntOutput)
}

// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
func (o TimeStaticOutput) Triggers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TimeStatic) pulumi.StringMapOutput { return v.Triggers }).(pulumi.StringMapOutput)
}

// Number of seconds since epoch time, e.g. `1581489373`.
func (o TimeStaticOutput) Unix() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeStatic) pulumi.IntOutput { return v.Unix }).(pulumi.IntOutput)
}

// Number year of timestamp.
func (o TimeStaticOutput) Year() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeStatic) pulumi.IntOutput { return v.Year }).(pulumi.IntOutput)
}

type TimeStaticArrayOutput struct{ *pulumi.OutputState }

func (TimeStaticArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TimeStatic)(nil)).Elem()
}

func (o TimeStaticArrayOutput) ToTimeStaticArrayOutput() TimeStaticArrayOutput {
	return o
}

func (o TimeStaticArrayOutput) ToTimeStaticArrayOutputWithContext(ctx context.Context) TimeStaticArrayOutput {
	return o
}

func (o TimeStaticArrayOutput) Index(i pulumi.IntInput) TimeStaticOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TimeStatic {
		return vs[0].([]*TimeStatic)[vs[1].(int)]
	}).(TimeStaticOutput)
}

type TimeStaticMapOutput struct{ *pulumi.OutputState }

func (TimeStaticMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TimeStatic)(nil)).Elem()
}

func (o TimeStaticMapOutput) ToTimeStaticMapOutput() TimeStaticMapOutput {
	return o
}

func (o TimeStaticMapOutput) ToTimeStaticMapOutputWithContext(ctx context.Context) TimeStaticMapOutput {
	return o
}

func (o TimeStaticMapOutput) MapIndex(k pulumi.StringInput) TimeStaticOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TimeStatic {
		return vs[0].(map[string]*TimeStatic)[vs[1].(string)]
	}).(TimeStaticOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TimeStaticInput)(nil)).Elem(), &TimeStatic{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeStaticArrayInput)(nil)).Elem(), TimeStaticArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeStaticMapInput)(nil)).Elem(), TimeStaticMap{})
	pulumi.RegisterOutputType(TimeStaticOutput{})
	pulumi.RegisterOutputType(TimeStaticArrayOutput{})
	pulumi.RegisterOutputType(TimeStaticMapOutput{})
}
