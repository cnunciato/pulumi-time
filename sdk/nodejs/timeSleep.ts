// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * ### Triggers Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as time from "@pulumiverse/time";
 *
 * const exampleResourceAssociation = new aws.ram.ResourceAssociation("exampleResourceAssociation", {
 *     resourceArn: aws_subnet.example.arn,
 *     resourceShareArn: aws_ram_resource_share.example.arn,
 * });
 * // AWS resources shared via Resource Access Manager can take a few seconds to
 * // propagate across AWS accounts after RAM returns a successful association.
 * const ramResourcePropagation = new time.TimeSleep("ramResourcePropagation", {
 *     createDuration: "60s",
 *     triggers: {
 *         subnet_arn: exampleResourceAssociation.resourceArn,
 *         subnet_id: aws_subnet.example.id,
 *     },
 * });
 * const exampleSubnetGroup = new aws.rds.SubnetGroup("exampleSubnetGroup", {subnetIds: [ramResourcePropagation.triggers.apply(triggers => triggers?.subnet_id)]});
 * ```
 *
 * ## Import
 *
 * This resource can be imported with the `create_duration` and `destroy_duration`, separated by a comma (`,`). e.g. For 30 seconds create duration with no destroy durationconsole
 *
 * ```sh
 *  $ pulumi import time:index/timeSleep:TimeSleep example 30s,
 * ```
 *
 *  e.g. For 30 seconds destroy duration with no create durationconsole
 *
 * ```sh
 *  $ pulumi import time:index/timeSleep:TimeSleep example ,30s
 * ```
 *
 *  The `triggers` argument cannot be imported. [1]https://golang.org/pkg/time/#ParseDuration
 */
export class TimeSleep extends pulumi.CustomResource {
    /**
     * Get an existing TimeSleep resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TimeSleepState, opts?: pulumi.CustomResourceOptions): TimeSleep {
        return new TimeSleep(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'time:index/timeSleep:TimeSleep';

    /**
     * Returns true if the given object is an instance of TimeSleep.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TimeSleep {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TimeSleep.__pulumiType;
    }

    /**
     * [Time duration](https://golang.org/pkg/time/#ParseDuration) to delay resource creation. For example, `30s` for 30 seconds or `5m` for 5 minutes. Updating this value by itself will not trigger a delay.
     */
    public readonly createDuration!: pulumi.Output<string | undefined>;
    public readonly destroyDuration!: pulumi.Output<string | undefined>;
    /**
     * Arbitrary map of values that, when changed, will run any creation or destroy delays again. See the main provider documentation for more information.
     */
    public readonly triggers!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a TimeSleep resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TimeSleepArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TimeSleepArgs | TimeSleepState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TimeSleepState | undefined;
            resourceInputs["createDuration"] = state ? state.createDuration : undefined;
            resourceInputs["destroyDuration"] = state ? state.destroyDuration : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
        } else {
            const args = argsOrState as TimeSleepArgs | undefined;
            resourceInputs["createDuration"] = args ? args.createDuration : undefined;
            resourceInputs["destroyDuration"] = args ? args.destroyDuration : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TimeSleep.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TimeSleep resources.
 */
export interface TimeSleepState {
    /**
     * [Time duration](https://golang.org/pkg/time/#ParseDuration) to delay resource creation. For example, `30s` for 30 seconds or `5m` for 5 minutes. Updating this value by itself will not trigger a delay.
     */
    createDuration?: pulumi.Input<string>;
    destroyDuration?: pulumi.Input<string>;
    /**
     * Arbitrary map of values that, when changed, will run any creation or destroy delays again. See the main provider documentation for more information.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a TimeSleep resource.
 */
export interface TimeSleepArgs {
    /**
     * [Time duration](https://golang.org/pkg/time/#ParseDuration) to delay resource creation. For example, `30s` for 30 seconds or `5m` for 5 minutes. Updating this value by itself will not trigger a delay.
     */
    createDuration?: pulumi.Input<string>;
    destroyDuration?: pulumi.Input<string>;
    /**
     * Arbitrary map of values that, when changed, will run any creation or destroy delays again. See the main provider documentation for more information.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
