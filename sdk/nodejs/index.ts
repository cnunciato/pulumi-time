// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./provider";
export * from "./timeOffset";
export * from "./timeRotating";
export * from "./timeStatic";

// Import resources to register:
import { TimeOffset } from "./timeOffset";
import { TimeRotating } from "./timeRotating";
import { TimeStatic } from "./timeStatic";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "time:index/timeOffset:TimeOffset":
                return new TimeOffset(name, <any>undefined, { urn })
            case "time:index/timeRotating:TimeRotating":
                return new TimeRotating(name, <any>undefined, { urn })
            case "time:index/timeStatic:TimeStatic":
                return new TimeStatic(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("time", "index/timeOffset", _module)
pulumi.runtime.registerResourceModule("time", "index/timeRotating", _module)
pulumi.runtime.registerResourceModule("time", "index/timeStatic", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("time", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:time") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
